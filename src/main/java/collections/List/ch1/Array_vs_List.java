package collections.List.ch1;

public interface Array_vs_List {
    /**
     * 공통점 :
     * 1. collection 은 매우 기본적인 특징
     * 2. loop 로 데이터 접근이 편하다.
     *
     * 차이점 - 배열 :
     * 1. 선언한 배열 크기 변경 불가능
     * 2. 메모리에 연속적 나열 할당
     * 3. index 에 위치한 데이터 삭제하면 해당 index 는 비여있다.
     *
     *   배열의 장점
     *  1. 데이터 크기가 정해졋을 경우 메모리 관리가 편하다.
     *  2. 메모리에 연속적으로 나열되어할당하기때문에 index 를 통한 search 가 빠르다.
     *
     *   배열의 단점
     *  1. 초기의 배열 크기를 너무크게주면 메모리 낭비가 심하고 반대로 너무작으면 데이터를 다 못담을수있다.
     *  2. 빈공간을 허용하지않아서 모두 밀어내거나 당겨준다. 그래서 삽입,삭제가 별루다. (ArrayList 의 경우인듯? <---> Array 는 그 배열 크기그대로 고정이다.)
     *
     * 차이점 - 리스트 :
     * 1. 길이가 가변적
     * 2. 데이터 연속적으로 나열(메모리에 연속적인 나열이 아니라 ref 들이 연속적으로 연결되어 있다.)
     * 3. 데이터 사이에 빈공간 허용x {a,b,c,d} -> {a,b,null,d} -> {a,b,d,null} 이 된다는 말이다.
     *
     *   리스트의 장점
     *  1. 데이터 크기를 유동적이다.
     *  2. 빈공간을 허용하지않아서 데이터관리가 편하다.
     *  3. 포인터로 데이터가 연결되어있어서 삽입삭제에 좋다. (ArrayList 제외)
     *
     *   리스트의 단점
     *  1. 객체로 데이터를 다뤄서 적은 양만 쓸경우 배열에 차지하는 메모리가 커진다.
     *  2. 기본적으로 주소기반이라 search 능력이 떨어진다.
     *
     */
}
